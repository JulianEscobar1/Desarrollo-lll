<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/com/yugioh/api/YugiohApiClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/yugioh/api/YugiohApiClient.java" />
              <option name="originalContent" value="package com.yugioh.api;&#10;&#10;import com.yugioh.model.Card;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;import java.io.IOException;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class YugiohApiClient {&#10;&#10;    private static final String RANDOM_CARD_ENDPOINT = &quot;https://db.ygoprodeck.com/api/v7/randomcard.php&quot;;&#10;&#10;    public YugiohApiClient() {&#10;    }&#10;&#10;    public List&lt;Card&gt; getCards() throws IOException, InterruptedException {&#10;        List&lt;Card&gt; cards = new ArrayList&lt;&gt;();&#10;        while(cards.size()&lt;3){&#10;            setCardList(cards);&#10;        }&#10;        return cards;&#10;    }&#10;&#10;    private void setCardList(List&lt;Card&gt; cards) throws IOException, InterruptedException {&#10;        HttpClient http = HttpClient.newBuilder()&#10;                .followRedirects(HttpClient.Redirect.ALWAYS)&#10;                .build();&#10;        HttpRequest request = HttpRequest.newBuilder()&#10;                .uri(URI.create(RANDOM_CARD_ENDPOINT))&#10;                .GET()&#10;                .build();&#10;        HttpResponse&lt;String&gt; response = http.send(request, HttpResponse.BodyHandlers.ofString());&#10;        if (response.statusCode() == 200) {&#10;            JSONObject json = new JSONObject(response.body());&#10;            json.getJSONArray(&quot;data&quot;).forEach(object -&gt;{&#10;                JSONObject cardJson = (JSONObject) object;&#10;                if(cardJson.getString(&quot;type&quot;).contains(&quot;Monster&quot;)) {&#10;                    JSONObject image = cardJson.getJSONArray(&quot;card_images&quot;).getJSONObject(0);&#10;                    Card card = new Card();&#10;                    card.setName(cardJson.getString(&quot;name&quot;));&#10;                    card.setAtk(cardJson.has(&quot;atk&quot;) &amp;&amp; !cardJson.isNull(&quot;atk&quot;) ? cardJson.getInt(&quot;atk&quot;) : 0);&#10;                    card.setDef(cardJson.has(&quot;def&quot;) &amp;&amp; !cardJson.isNull(&quot;def&quot;) ? cardJson.getInt(&quot;def&quot;) : 0);&#10;                    card.setImageUrl(image.getString(&quot;image_url_cropped&quot;));&#10;                    cards.add(card);&#10;                }&#10;            });&#10;        }else {&#10;            throw new IOException(&quot;Error al cargar lista de cartas: &quot; + response.statusCode());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.yugioh.api;&#10;&#10;import com.yugioh.model.Card;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;import java.io.IOException;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class YugiohApiClient {&#10;&#10;    private static final String RANDOM_CARD_ENDPOINT = &quot;https://db.ygoprodeck.com/api/v7/randomcard.php&quot;;&#10;&#10;    public YugiohApiClient() {&#10;    }&#10;&#10;    public List&lt;Card&gt; getCards() throws IOException, InterruptedException {&#10;        List&lt;Card&gt; cards = new ArrayList&lt;&gt;();&#10;        while(cards.size()&lt;3){&#10;            setCardList(cards);&#10;        }&#10;        return cards;&#10;    }&#10;&#10;    private void setCardList(List&lt;Card&gt; cards) throws IOException, InterruptedException {&#10;        HttpClient http = HttpClient.newBuilder()&#10;                .followRedirects(HttpClient.Redirect.ALWAYS)&#10;                .build();&#10;        HttpRequest request = HttpRequest.newBuilder()&#10;                .uri(URI.create(RANDOM_CARD_ENDPOINT))&#10;                .GET()&#10;                .build();&#10;        HttpResponse&lt;String&gt; response = http.send(request, HttpResponse.BodyHandlers.ofString());&#10;        if (response.statusCode() == 200) {&#10;            JSONObject json = new JSONObject(response.body());&#10;            json.getJSONArray(&quot;data&quot;).forEach(object -&gt;{&#10;                JSONObject cardJson = (JSONObject) object;&#10;                if(cardJson.getString(&quot;type&quot;).contains(&quot;Monster&quot;)) {&#10;                    JSONObject image = cardJson.getJSONArray(&quot;card_images&quot;).getJSONObject(0);&#10;                    Card card = new Card();&#10;                    card.setName(cardJson.getString(&quot;name&quot;));&#10;                    card.setAtk(cardJson.has(&quot;atk&quot;) &amp;&amp; !cardJson.isNull(&quot;atk&quot;) ? cardJson.getInt(&quot;atk&quot;) : 0);&#10;                    card.setDef(cardJson.has(&quot;def&quot;) &amp;&amp; !cardJson.isNull(&quot;def&quot;) ? cardJson.getInt(&quot;def&quot;) : 0);&#10;                    card.setImageUrl(image.getString(&quot;image_url_cropped&quot;));&#10;                    cards.add(card);&#10;                }&#10;            });&#10;        }else {&#10;            throw new IOException(&quot;Error al cargar lista de cartas: &quot; + response.statusCode());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>